#include <stdio.h>

int main()
{
	//int arr[4] = { 1,2,3,4 };
	//int* p1 = arr; //arr本身的类型就是 int*
	////相当于
	//int* p2 = &arr[0]; //第一个元素的地址

	//指针加减法
	//int arr[4] = { 1,2,3,4 };
	//int* p1 = arr;
	//p1 += 1; //向后移动一个位置
	//printf("%d \n", *p1);

	//p1 -= 1; //向钱移动一个位置
	//printf("%d \n", *p1);

	//int arr[4] = { 1,2,3,4 };
	//int* p1 = arr;
	//int* p2 = p1 + 1; //指针位置向后移动一位

	//printf("%d \n", *p2);



//指针与数组之间的关系

	//int arr[4] = { 1,2,3,4 };
	//int* p;

//(1) 用p指向数组中arr的任意一个元素  例如，指向arr[3]
	//第一种方法：
	//p = arr + 3;
	//printf("%d \n", *p);
	//第二种方法：
	//p = &arr[3];
	//printf("%d \n", *p);

//(2) 给数组元素赋值
	//第一种方法：
	//arr[3] = 10;
	//第二种方法：
	//* (arr + 3) = 10;
	//printf("%d \n", arr[3]);
	//或
	//int* p = arr + 3;
	//*p = 10;
	//printf("%d \n", *p);

//(3) 把p可以当成数组使用
	//int* p = &arr[1];
	//p[0] = 0xAA; // p[0]: 自p开始的第0号元素, 即arr[1]
	//p[1] = 0xBB; // p[1]: 即arr[2]
     
	//int a = 10;
	//int* p = &a;
	//p[0] = 11; // 长度为1的数组
	
//(4) 数组的遍例
	//第一种方法 :
	//int arr[4];
	//for (int i = 0; i < 4; i++)
	//{
	//	printf("%d \n", arr[i]);
	//}

	//第二种方法:
	int arr[4] = {1,2,3,4};
	for (int* p = arr; p < arr + 4; p++) // 注: arr+4
	{
		printf("%d \n", *p);
	}

//	(5)越界访问
	//int arr[4] = { 1,2,3,4 };
	//arr[4] = 10; //运行时错误！

	//注：错误分为编译错误和运行错误。编译错误由编译检查，属于语法上的错误。运行错误只有在运行时才出错，一般会导致程序崩溃。
	//使用指针访问数组元素时，也不能越界。
	//int* p = arr;
	//*(p + 4) = 10; // 运行时错误！// 严重的隐惑


	return 0;
}